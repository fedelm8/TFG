import subprocess
import json

def check_rootkit_scan():
    """Realiza un escaneo de rootkits usando chkrootkit o rkhunter."""
    try:
        # Verificar si chkrootkit está instalado y realizar un escaneo
        chkrootkit_status = subprocess.getoutput("which chkrootkit")
        if chkrootkit_status:
            chkrootkit_scan = subprocess.getoutput("sudo chkrootkit")
            return f"Chkrootkit scan results:\n{chkrootkit_scan}"
        else:
            # Si chkrootkit no está instalado, intentar rkhunter
            rkhunter_status = subprocess.getoutput("which rkhunter")
            if rkhunter_status:
                rkhunter_scan = subprocess.getoutput("sudo rkhunter --check")
                return f"Rkhunter scan results:\n{rkhunter_scan}"
            else:
                return "No rootkit scanner found. Consider installing chkrootkit or rkhunter for rootkit detection."
    except Exception as e:
        return f"Error performing rootkit scan: {str(e)}"

def check_antivirus_status():
    """Verifica la configuración de herramientas antivirus, si están disponibles."""
    try:
        # Verificar si ClamAV está instalado
        clamav_status = subprocess.getoutput("which clamscan")
        if clamav_status:
            clamav_version = subprocess.getoutput("clamscan --version")
            return f"ClamAV is installed. Version:\n{clamav_version}"
        else:
            return "ClamAV not installed. Consider installing it for malware protection."

        # Alternativamente, verificar Sophos (si está instalado)
        sophos_status = subprocess.getoutput("which savscan")
        if sophos_status:
            sophos_version = subprocess.getoutput("savscan --version")
            return f"Sophos Antivirus is installed. Version:\n{sophos_version}"
        else:
            return "Sophos Antivirus not installed. Consider installing it for malware protection."
    except Exception as e:
        return f"Error checking antivirus status: {str(e)}"

def check_suspicious_memory_behaviors():
    """Analiza la memoria en busca de comportamientos sospechosos."""
    try:
        # Verificar procesos sospechosos en la memoria
        suspicious_processes = subprocess.getoutput("ps aux --sort=-%cpu | head -n 10")
        if suspicious_processes:
            return f"Suspicious processes (Top 10 CPU consuming):\n{suspicious_processes}"
        else:
            return "No suspicious processes found in memory."
    except Exception as e:
        return f"Error analyzing memory for suspicious behaviors: {str(e)}"

def run():
    """Ejecuta todas las auditorías de protección contra malware y devuelve los resultados."""
    print("[Malware Protection] Starting malware protection audit...")

    rootkit_scan = check_rootkit_scan()
    antivirus_status = check_antivirus_status()
    suspicious_memory_behaviors = check_suspicious_memory_behaviors()

    print("\n---------------------------------------------------")
    print(f"- Rootkit scan: {rootkit_scan}")
    print(f"- Antivirus status: {antivirus_status}")
    print(f"- Suspicious memory behaviors: {suspicious_memory_behaviors}")
    print("---------------------------------------------------\n")

    return {
        "rootkit_scan": rootkit_scan,
        "antivirus_status": antivirus_status,
        "suspicious_memory_behaviors": suspicious_memory_behaviors
    }

if __name__ == "__main__":
    output = run()
    print(json.dumps(output, indent=4))
